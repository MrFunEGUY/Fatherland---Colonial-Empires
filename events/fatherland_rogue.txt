namespace = fatherland_rogue

country_event = { #### Rogue Initializer
	id = fatherland_rogue.90
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = no_rogue_timer }
	}

	immediate = {

		random = {
			chance = 65
			random_owned_pop = { # Really wish there was a better way to do this
				limit = {
					OR = {
						is_free_robot = yes
						has_citizenship_type = { type = citizenship_full }
						has_citizenship_type = { type = citizenship_limited }
						has_citizenship_type = { type = citizenship_purge }
						has_citizenship_type = { type = citizenship_slavery }
						has_citizenship_type = { type = citizenship_organic_trophy }
					}
				}
				species = { save_event_target_as = fatherland_species }
			}

			if = {	##### DISTANCE LIMITER ENABLED (Technology limited rogue spawning distance)
				limit = { has_global_flag = fatherland_rogue_distance_limited }

				if = {	# Hyperdrive I
					limit = {
						NOR = {
							has_technology = tech_hyper_drive_2
							has_technology = tech_hyper_drive_3
							has_technology = tech_jump_drive_1
							has_technology = tech_psi_jump_drive_1
						}
					}
					if = {
						limit = {
							any_system_within_border = {
								closest_system = {
									limit = { NOT = { exists = space_owner } }
									use_bypasses = yes
									max_steps = 1
								}
								any_galaxy_planet = {
									is_valid_rogue_planet = yes
									distance = {
										source = prev
										use_bypasses = yes
										min_jumps = 0
										max_jumps = 10
									}
								}
							}
						}
						random_system_within_border = {
							limit = {
								closest_system = {
									limit = { NOT = { exists = space_owner } }
									use_bypasses = yes
									max_steps = 1
								}
								any_galaxy_planet = {
									is_valid_rogue_planet = yes
									distance = {
										source = prev
										use_bypasses = yes
										min_jumps = 0
										max_jumps = 10
									}
								}
							}
							random_galaxy_planet = {
								limit = {
									is_valid_rogue_planet = yes
									distance = {
										source = prev
										use_bypasses = yes
										min_jumps = 0
										max_jumps = 10
									}
								}
								add_modifier = { modifier = rogue_target }
								save_event_target_as = rogue_event_planet
								set_planet_flag = rogue_target
							}
						}
						country_event = { id = fatherland_rogue.100 }
					}
				}
				if = {	# Hyperdrive II
					limit = {
						has_technology = tech_hyper_drive_2
						NOR = {
							has_technology = tech_hyper_drive_3
							has_technology = tech_jump_drive_1
							has_technology = tech_psi_jump_drive_1
						}
					}
					if = {
						limit = {
							any_system_within_border = {
								closest_system = {
									limit = { NOT = { exists = space_owner } }
									use_bypasses = yes
									max_steps = 1
								}
								any_galaxy_planet = {
									is_valid_rogue_planet = yes
									distance = {
										source = prev
										use_bypasses = yes
										min_jumps = 0
										max_jumps = 20
									}
								}
							}
						}
						random_system_within_border = {
							limit = {
								closest_system = {
									limit = { NOT = { exists = space_owner } }
									use_bypasses = yes
									max_steps = 1
								}
								any_galaxy_planet = {
									is_valid_rogue_planet = yes
									distance = {
										source = prev
										use_bypasses = yes
										min_jumps = 0
										max_jumps = 20
									}
								}
							}
							random_galaxy_planet = {
								limit = {
									is_valid_rogue_planet = yes
									distance = {
										source = prev
										use_bypasses = yes
										min_jumps = 0
										max_jumps = 20
									}
								}
								add_modifier = { modifier = rogue_target }
								save_event_target_as = rogue_event_planet
								set_planet_flag = rogue_target
							}
						}
						country_event = { id = fatherland_rogue.100 }
					}
				}
				if = {	# Hyperdrive III
					limit = {
						has_technology = tech_hyper_drive_3
						NOR = {
							has_technology = tech_jump_drive_1
							has_technology = tech_psi_jump_drive_1
						}
					}
					if = {
						limit = {
							any_system_within_border = {
								closest_system = {
									limit = { NOT = { exists = space_owner } }
									use_bypasses = yes
									max_steps = 1
								}
								any_galaxy_planet = {
									is_valid_rogue_planet = yes
									distance = {
										source = prev
										use_bypasses = yes
										min_jumps = 0
										max_jumps = 40
									}
								}
							}
						}
						random_system_within_border = {
							limit = {
								closest_system = {
									limit = { NOT = { exists = space_owner } }
									use_bypasses = yes
									max_steps = 1
								}
								any_galaxy_planet = {
									is_valid_rogue_planet = yes
									distance = {
										source = prev
										use_bypasses = yes
										min_jumps = 0
										max_jumps = 40
									}
								}
							}
							random_galaxy_planet = {
								limit = {
									is_valid_rogue_planet = yes
									distance = {
										source = prev
										use_bypasses = yes
										min_jumps = 0
										max_jumps = 40
									}
								}
								add_modifier = { modifier = rogue_target }
								save_event_target_as = rogue_event_planet
								set_planet_flag = rogue_target
							}
						}
						country_event = { id = fatherland_rogue.100 }
					}
				}
				if = {	# Jump Drive
					limit = {
						OR = {
							has_technology = tech_jump_drive_1
							has_technology = tech_psi_jump_drive_1
						}
					}
					if = {
						limit = {
							any_system_within_border = {
								closest_system = {
									limit = { NOT = { exists = space_owner } }
									use_bypasses = yes
									max_steps = 1
								}
								any_galaxy_planet = {
									is_valid_rogue_planet = yes
									distance = {
										source = prev
										use_bypasses = yes
										min_jumps = 0
										max_jumps = 1000
									}
								}
							}
						}
						random_system_within_border = {
							limit = {
								closest_system = {
									limit = { NOT = { exists = space_owner } }
									use_bypasses = yes
									max_steps = 1
								}
								any_galaxy_planet = {
									is_valid_rogue_planet = yes
									distance = {
										source = prev
										use_bypasses = yes
										min_jumps = 0
										max_jumps = 1000
									}
								}
							}
							random_galaxy_planet = {
								limit = {
									is_valid_rogue_planet = yes
									distance = {
										source = prev
										use_bypasses = yes
										min_jumps = 0
										max_jumps = 1000
									}
								}
								add_modifier = { modifier = rogue_target }
								save_event_target_as = rogue_event_planet
								set_planet_flag = rogue_target
							}
						}
						country_event = { id = fatherland_rogue.100 }
					}
				}
			}
			else_if = {
				limit = { any_galaxy_planet = { is_valid_rogue_planet = yes } }
				random_galaxy_planet = {
					limit = { is_valid_rogue_planet = yes }
					add_modifier = { modifier = rogue_target }
					save_event_target_as = rogue_event_planet
					set_planet_flag = rogue_target
				}
				country_event = { id = fatherland_rogue.100 }
			}
		}
	}
}

country_event = { #### MANY FAILURES EVENT
	id = fatherland_rogue.95
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_global_flag = fatherland_rogues_active
		is_country_type = default
	}

	immediate = {	
	}
}

################################################################# 
#################   ROGUE COLONY ON-ACTION CALL EVENTS
#################################################################
country_event = { #### VERY FAST (Yearly)
	id = fatherland_rogue.96
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = {
			has_authority = auth_hive_mind 
			has_policy_flag =  iron_curtain
		}
		has_global_flag = fatherland_rogues_active
		has_global_flag = fatherland_veryfast_rogues
		is_country_type = default
	}

	immediate = {
		country_event = { id = fatherland_rogue.90 
			days = 30
			random = 160
		}	
	}
}

country_event = { #### FASTER (Bi-Yearly)
    id = fatherland_rogue.97
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = {
			has_authority = auth_hive_mind 
			has_policy_flag =  iron_curtain
		}
		has_global_flag = fatherland_rogues_active
		has_global_flag = fatherland_faster_rogues
		is_country_type = default
	}

	immediate = {
		country_event = { id = fatherland_rogue.90 
			days = 1
			random = 200
		}	
	}
}

country_event = { #### FAST (Five-Yearly)
    id = fatherland_rogue.98
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = {
			has_authority = auth_hive_mind 
			has_policy_flag =  iron_curtain
		}
		has_global_flag = fatherland_rogues_active
		has_global_flag = fatherland_fast_rogues
		is_country_type = default
	}

	immediate = {
		country_event = { id = fatherland_rogue.90 
			days = 160
			random = 365
		}	
	}
}

country_event = { #### DEFAULT (Decade - Default)
    id = fatherland_rogue.99
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = {
			has_authority = auth_hive_mind 
			has_policy_flag =  iron_curtain
		}
		has_global_flag = fatherland_rogues_active
		has_global_flag = fatherland_standard_rogues
		is_country_type = default
	}

	immediate = {
		country_event = { id = fatherland_rogue.90 
			days = 1
			random = 600
		}	
	}
}


################################################################# 
#################   MAIN ROGUE COLONY EVENT
#################################################################
country_event = {
    id = fatherland_rogue.100
    title = "fatherland_rogue.100_name"
	################################### EXPLORERS
	desc = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_explorers }
		}
		text = fatherland_rogue.100_explorers_desc
	}
	picture = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_explorers }
		}
		picture	= GFX_evt_big_landing_ship
	}	
	################################### MINORITY
	desc = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_minority }
		}
		text = fatherland_rogue.100_minority_desc
	}
	picture = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_minority }
		}
		picture	= GFX_evt_alien_propaganda	
	}	
	################################### DISSIDENTS
	desc = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_dissidents }
		}
		text = fatherland_rogue.100_dissidents_desc
	}
	picture = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_dissidents }
		}
		picture	= GFX_evt_civil_action
	}	
	###################################	CORPO
	desc = {
		trigger = {
			OR = {
				owner = { has_country_flag = fatherland_roguesetup_corpo }
				owner = { has_country_flag = fatherland_roguesetup_family_corpo }
			}
		}
		text = fatherland_rogue.100_corpo_desc
	}
	picture = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_corpo }
		}
		picture	= GFX_evt_board_meeting
	}
	###################################	ROGUE AI (Non-Machine INT)
	desc = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_ai }
		}
		text = fatherland_rogue.100_ai_desc
	}
	picture = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_ai }
		}
		picture	= GFX_evt_sapient_AI
	}	
	###################################	BANISHED HOUSE
	desc = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_banished }
		}
		text = fatherland_rogue.100_banished_desc
	}
	picture = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_banished }
		}
		picture	= GFX_evt_arguing_senate
	}	
	###################################	SLAVES
	desc = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_slaves }
		}
		text = fatherland_rogue.100_slaves_desc
	}
	picture = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_slaves }
		}
		picture	= GFX_evt_night_raid
	}	
	###################################	PROLES
	desc = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_proles }
		}
		text = fatherland_rogue.100_proles_desc
	}
	picture = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_proles }
		}
		picture	= GFX_evt_alien_segregation
	}	
	###################################	BIOTROPHY	
	desc = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_biotrophy }
		}
		text = fatherland_rogue.100_biotrophies_desc
	}
	picture = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_biotrophy }
		}
		picture	= GFX_evt_guardians
	}	
	###################################	CRUSADERS	
	desc = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_crusaders }
		}
		text = fatherland_rogue.100_crusaders_desc
	}
	picture = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_crusaders }
		}
		picture	= GFX_evt_surrender
	}	
	###################################	MACHINE INTELLIGENCE ROGUE
	desc = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_machineintelligence }
		}
		text = fatherland_rogue.100_machineintelligence_desc
	}
	picture = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_machineintelligence }
		}
		picture	= GFX_evt_glitchy_matrix
	}	
	###################################	MACHINE INTELLIGENCE ROGUE
	desc = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_synthrevolt }
		}
		text = fatherland_rogue.100_synthrevolt_desc
	}
	picture = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_synthrevolt }
		}
		picture	= GFX_evt_space_walk
	}
	###################################	Disinherited Heir
	desc = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_heir }
		}
		text = fatherland_rogue.100_heir_desc
	}
	picture = {
		trigger = {
			owner = { has_country_flag = fatherland_roguesetup_heir }
		}
		picture	= GFX_evt_ghost_ship
	}	
	###################################		
	show_sound = event_assembly_fight
	is_triggered_only = yes

	trigger = {
		############ MOD & FRONTIERS ACTIVATED		
		has_global_flag = fatherland_active
		has_global_flag = fatherland_rogues_active
		is_country_type = default
		############ NOT HIVE
		NOT = { has_authority = auth_hive_mind }
		############ TIME PASSED AND POPS
		if = { limit = { has_global_flag = fatherland_rogue_timelimit_on }
			years_passed > 10
		}
		if = { limit = { has_global_flag = fatherland_rogue_poplimit }		
			capital_scope = { num_pops > 20 }
		}
		############ MAIN CHECK	
		OR = {
			AND = {  ### PLAYER
				is_ai = no
				check_variable = {
					which = fatherland_currentglobal_rogues
					value < fatherland_globalmax_rogues
				}
				check_variable = {
					which = fatherland_playercurrent_rogues
					value < fatherland_playermax_rogues
				}	
			}
			AND = { ### AI
				is_ai = yes
				check_variable = {
					which = fatherland_currentglobal_rogues
					value < fatherland_globalmax_rogues
				}
				check_variable = {
					which = fatherland_aicurrent_rogues
					value < fatherland_aimax_rogues
				}
			}
		}
		OR = { ########### CHECKS TO SEE IF HEGIRAS, FRONITER WORLDS OR DOOMSDAY FATHERLANDS CAN PRODUCE ROGUES	
			AND = {
				is_rogue_colony = yes
				has_global_flag = fatherland_roguerogues_on
			}			
			AND = {	
				has_origin = origin_hegira_colony 
				has_global_flag = fatherland_hegira_rogues_on
			}
			AND = {	
				has_origin = origin_frontier_world #Not an error, needs FW Addon
				has_global_flag = fatherland_flippedempire_frontiers_on
			}			
			AND = {
				has_origin = origin_doomsday
				NOT = { has_country_flag = fatherland_the_hegira }
			}
			NOR = { 
				has_origin = origin_hegira_colony 
				has_origin = origin_doomsday
				has_origin = origin_frontier_world
				is_rogue_colony = yes
			}
		}
	}

    immediate = {
    	if = {
    		limit = { exists = event_target:disinherited_heir_fatherland }
    		set_country_flag = fatherland_roguesetup_heir
    	}
    	######################### RANDOMLY SELECTS TYPE OF ROGUE COLONY BASED ON WEIGHTED MODIFIERS	
    	else = {
    		random_list = {	
    			###################################################### NORMAL EMPIRE ROGUES
    			10 = { ### Plucky Explorers
    				modifier = {
    					factor = 0
						OR = {
							is_gestalt = yes
							has_civic = civic_police_state
							has_civic = civic_imperial_cult
							has_ai_personality = harmonious_hierarchy
							has_ethic = ethic_fanatic_authoritarian
						}
    				}
    				modifier = {
    					factor = 0.5
    					has_ethic = ethic_authoritarian
    				}
    				modifier = {
    					factor = 2.5
    					has_policy_flag = promote_settlers
    				}
    				set_country_flag = fatherland_roguesetup_explorers
    			}
    			20 = { ### Persecuted Minority
    				set_country_flag = fatherland_roguesetup_minority
    				modifier = {
    					factor = 0
						OR = {
							is_gestalt = yes ### NO ROBO
							NOR = {  ## Only residents can do this
								any_owned_pop = { has_citizenship_type = { type = citizenship_purge } }
								any_owned_pop = { has_citizenship_type = { type = citizenship_limited } }
							}
						}
    				}
					modifier = {
						factor = 1.75
						any_owned_pop = { has_citizenship_type = { type = citizenship_purge } }
					}
					modifier = {
						factor = 1.25
						has_civic = civic_police_state
					}
    				modifier = {
    					factor = 0.5
    					has_ethic = ethic_egalitarian
    				}
					modifier = {
						factor = 0.25
						has_ethic = ethic_fanatic_egalitarian
					}
    			}
    			15 = { ### Ideological Dissidents
    				set_country_flag = fatherland_roguesetup_dissidents
    				modifier = { ### NO ROBO
    					factor = 0
						is_gestalt = yes
    				}
					modifier = {
						factor = 1.5
						has_civic = civic_police_state
					}
    			}
    			1 = { ### Rogue Corporation (not megacorpo)
    				set_country_flag = fatherland_roguesetup_corpo
    				modifier = {
    					factor = 0
    					OR = {
							is_gestalt = yes
    						has_civic = civic_shared_burden
    					}
    				}
					modifier = {
						factor = 1.25
						has_ethic = ethic_socialism
					}
					modifier = {
						factor = 2
						has_ethic = ethic_fanatic_socialism
					}
    			}
    			1 = { ### Rogue Family Corporation (not megacorpo)
    				set_country_flag = fatherland_roguesetup_family_corpo
    				modifier = {
    					factor = 0
    					OR = {
    						NOT = { has_global_flag = cultural_overhaul_funefork_active }
    						is_gestalt = yes
    						has_civic = civic_shared_burden
    					}
    				}
					modifier = {
						factor = 1.25
						has_ethic = ethic_socialism
					}
					modifier = {
						factor = 2
						has_ethic = ethic_fanatic_socialism
					}
					modifier = {
						factor = 1.25
						is_authoritarian = yes
					}
    			}
    			5 = { ### Rogue AI (For normal empires)
    				set_country_flag = fatherland_roguesetup_ai
    				modifier = {  ### DECREASED IF YOU OUTLAW ROBOTS
    					factor = 0.5
    					has_policy_flag = robots_outlawed
    				}
    				modifier = {  ### DECREASED IF YOU OUTLAW AI
    					factor = 0.1
    					has_policy_flag = ai_outlawed
    				}
    				modifier = { ## INCREASED IF YOU HAVE DANGEROUS TECHS
    					factor = 1.5
						has_technology = tech_combat_computers_3
    				}
    				modifier = { ## EVEN MORE IF YOU HAVE THE MOST DANGEROUS TECH
    					factor = 2
    					has_technology = tech_sapient_ai
    				}
    				modifier = {
    					factor = 0
						OR = {
							has_ethic = ethic_gestalt_consciousness ### NO ROBOT EMPIRES (They get their own thing)
							NOT = { has_technology = tech_synthetic_workers } ### NO AI FOR THOSE WITHOUT SYNTHS
						}
    				}
    			}
    			###################################################### CIVIC SPECIFIC TYPES
    			25 = { ### Banished House // Feudal Society
    				set_country_flag = fatherland_roguesetup_banished
    				modifier = {
    					factor = 0
    					NOR = {
							has_civic = civic_feudal_realm
							has_civic = civic_aristocratic_elite
						}
    				}
					modifier = {
						factor = 2
						is_oligarchy = yes
					}
    				modifier = {
    					factor = 3
    					has_civic = civic_feudal_realm
    					has_civic = civic_aristocratic_elite
    				}
    			}
    			20 = { ### Crusader State // Fanatic Spiritualist - Militarist
    				set_country_flag = fatherland_roguesetup_crusaders
    				modifier = {
    					factor = 0
						OR = {
							is_gestalt = yes
							is_pacifist = no
							NOT = { has_ethic = ethic_fanatic_spiritualist }
						}
    				}

					modifier = { ## Disgruntled Militants leave
						factor = 1.25
						is_pacifist = yes
					}
    			}
    			20 = { ### Slave Revolt	- Nation with slaves
    				set_country_flag = fatherland_roguesetup_slaves
    				modifier = {
    					factor = 0
    					any_owned_pop = { is_enslaved = no }
    				}
    				modifier = {
    					factor = 5
    					has_country_flag = slave_revolt_chain_active
    				}
					modifier = { ## Civil Wars Mod
						factor = 5
						OR = {
							any_owned_planet = { has_planet_flag = plan_slave_sep_active }
							any_owned_sector = { has_sector_flag = sec_slave_sep_active }
						}
					}
    			}
    			10 = { ### Syncretic Servile Prole Revolt - Syncretic Evolution Origin
    				set_country_flag = fatherland_roguesetup_proles
    				modifier = {
    					factor = 0
    					NOT = { any_owned_pop = { pop_has_trait = trait_syncretic_proles } }
    				}
    				modifier = {
    					factor = 0.5
    					has_edict = increased_syncretic_prole_repression
    				}
    			}
    			###################################################### MACHINE INTELLIGENCE
    			20 = { ### Machine Intelligence
    				modifier = { ### ROBO ONLY
    					factor = 0
    					NOT = { has_authority = auth_machine_intelligence }
    				}
    				set_country_flag = fatherland_roguesetup_machineintelligence
    			}
    			5 = { ### Synth Revolt
    				modifier = {
    					factor = 0
						OR = {
							has_authority = auth_machine_intelligence ### NO ROBO (can they even have synths?)
							NAND = { ### Must have synth tech and applicable synth POP
								has_technology = tech_synthetic_workers
								any_owned_pop = { is_robot_pop = yes }
							}
						}
    				}
    				set_country_flag = fatherland_roguesetup_synthrevolt
    			}
    			20 = { ### Liberated Biotrophy - Rogue Servitors
    				set_country_flag = fatherland_roguesetup_biotrophy
    				modifier = {
    					factor = 0
    					NOT = { any_owned_pop = { has_living_standard = { type = living_standard_organic_trophy } } }
    				}
    				modifier = {
    					factor = 0.5
    					root = { has_edict = increased_biotrophy_security }
    				}
    				modifier = {
    					factor = 0.1
    					root = { has_edict = extreme_biotrophy_security }
    				}
    			}
    			##################################################### SPECIAL
    			10 = { ### Old Nations of Earth - UNE or human_1 flagged start. (TBD, not yet implented)
    				set_country_flag = fatherland_roguesetup_earth_nation
    				modifier = {
    					factor = 0
    					OR = {
    						NOR = {
								has_country_flag = human_1
								has_country_flag = fatherland_human_rogues_enabled
    						}
    						has_country_flag = fatherland_human_rogues_finished
    					}
    				}
    				modifier = { ### Player can force human nations to go first, once setlist is completed
    					factor = 10
						has_country_flag = fatherland_human_rogues_boost
    				}
    			}
    		}
    	}
		
		###################################################### HIVE MINDS
		# Hive Split (New Hive Mind)
		# Individual in the Collective (Become Normal Empire)

		###################################################### FALLEN EMPIRES AND KHAN
		# 
		# Fallen Son (Rogue relavtive of the Khan or similar, spawns close to mauarder empire)
		
		###################################################### CRISIS
		# The Traitor Empire (Interdimensional Empire, joins the galactics to fight against the unbidden and friends, max 1)
		# Stack Overflow (Contigency Empire, joins the galactics to fight against the contingeny similar to final defensive directive )
		# Rogue Queen (Preythoryn Empire, joins the galactics to fight against the scourage and try to stand against the hunters they speak of)	
			
		######################### SELECTS FATHERLAND SPECIES THAT WILL APPEAR ON NEW ROGUE COLONY
		save_event_target_as = fatherland_empire
		if = {	#### Chooses Enslaved POP is that was flagged above
			limit = { has_country_flag = fatherland_roguesetup_slaves }
			random_owned_pop = {
				limit = { is_enslaved = yes }  
				species = { save_event_target_as = fatherland_species }
				set_pop_flag = fatherland_rogue_pop
			}
		}
		else_if = {	#### Chooses Syncretic Prole POP is that was flagged above
			limit = { has_country_flag = fatherland_roguesetup_proles } 
			random_owned_pop = {
				limit = { pop_has_trait = trait_syncretic_proles }  
				species = { save_event_target_as = fatherland_species }
				set_pop_flag = fatherland_rogue_pop
			}
		}
		else_if = {	#### Chooses an organic biotrophy POP that was flagged above
			limit = { has_country_flag = fatherland_roguesetup_biotrophy } 
			random_owned_pop = {
				limit = { has_living_standard = { type = living_standard_organic_trophy } }  
				species = { save_event_target_as = fatherland_species }
				set_pop_flag = fatherland_rogue_pop
			}
		}
		else_if = {	#### Chooses a machine pop if Rogue AI
			limit = { has_country_flag = fatherland_roguesetup_machineintelligence } 
			random_owned_pop = {
				limit = { is_robot_pop = yes }
				species = { save_event_target_as = fatherland_species }
				set_pop_flag = fatherland_rogue_pop
			}
		}
		else_if = {	#### Chooses a robot POP for free, non-gestalt empire
			limit = { has_country_flag = fatherland_roguesetup_synthrevolt } 
			random_owned_pop = {
				limit = {
					is_robot_pop = yes
					is_free_robot = no
				}
				species = { save_event_target_as = fatherland_species }
				set_pop_flag = fatherland_rogue_pop
			}
		}
		else_if = {	#### Chooses a Purge or Resident for Persecuted Minority
			limit = { has_country_flag = fatherland_roguesetup_minority }
			random_owned_pop = {
				limit = {
					OR = {
						has_citizenship_type = { type = citizenship_purge }
						has_citizenship_type = { type = citizenship_limited }
					}
				}
				species = { save_event_target_as = fatherland_species }
				set_pop_flag = fatherland_rogue_pop
			}
		}
		if = {  #### MAIN POP
			limit = {
				NOR = { 
					has_country_flag = fatherland_roguesetup_slaves
					has_country_flag = fatherland_roguesetup_proles
					has_country_flag = fatherland_roguesetup_minority
					has_country_flag = fatherland_roguesetup_biotrophy
					has_country_flag = fatherland_roguesetup_machineintelligence
					has_country_flag = fatherland_roguesetup_synthrevolt
				}
			}
			random_owned_pop = {
				limit = {
					has_citizenship_rights = yes
					NOR = {
						pop_has_trait = trait_syncretic_proles
						is_pop_category = pre_sapients
						has_living_standard = { type = living_standard_organic_trophy }
					} 
					OR = {
						is_free_robot = yes
						is_robot_pop = no
					}
				}
				save_event_target_as = fatherland_species
				set_pop_flag = fatherland_rogue_pop
			}
		}
		if = {	#### POTENTIAL EXTRA ROBOT POP
			limit = {
				NOR = { 
					has_country_flag = fatherland_roguesetup_biotrophy
					has_country_flag = fatherland_roguesetup_machineintelligence
					has_country_flag = fatherland_roguesetup_synthrevolt
				}
				any_owned_pop = {
					is_free_robot = no
					is_robot_pop = yes	
				}
			}
			random_owned_pop = {
				limit = {
					has_citizenship_rights = yes
					NOR = {
						pop_has_trait = trait_syncretic_proles
						is_pop_category = pre_sapients
						has_living_standard = { type = living_standard_organic_trophy }
					} 
					is_free_robot = no
					is_robot_pop = yes
				}  
				species = { save_global_event_target_as = fatherland_robot_species }
				#set_pop_flag = fatherland_rogue_robot_pop
			}
			set_country_flag = fatherland_roguesetup_extra_robot
		}		
	}

	option = { ####### Iron Curtain alternate event (this may be broken / mess up event flow, may delete later)  
		name = fatherland_rogue.100.capture
		custom_tooltip = "fatherland_rogue.100.capture.tooltip"
		trigger = { has_policy_flag = colonial_restrictions }
		hidden_effect = {
			fatherland_iron_curtain_rogue_effect = yes
		}
	}
	
	option = { ####### The Main Rogue Colony Event
		name = fatherland_rogue.100.a
		trigger = { any_galaxy_planet = { has_planet_flag = rogue_target } }
		
		save_event_target_as = fatherland_empire

		hidden_effect = {
			######## NORMAL EMPIRE ROGUES
			if = {  ######## PERSECUTED MINORITY
				limit = { has_country_flag = fatherland_roguesetup_minority }
				custom_tooltip = "fatherland_rogue.100.minority.tooltip"
				create_country = {
					inline_script = "countries/fatherland_rogue_default"
					species = event_target:fatherland_species
					civics = random
					origin = origin_perscuted_minority
					effect = {
						add_opinion_modifier = {
							modifier = opinion_fatherland_persecuted
							who = root
						}
						species = { save_event_target_as = new_founder }
						get_rogue_colony_after_effect = yes
					}
				}
			}
			if = {  ######## IDEOLOGICAL DISSIDENTS
				limit = { has_country_flag = fatherland_roguesetup_dissidents }
				custom_tooltip = "fatherland_rogue.100.dissidents.tooltip"
				create_country = {
					inline_script = "countries/fatherland_rogue_default"
					species = event_target:fatherland_species
					civics = random
					origin = origin_ideological_dissidents
					effect = {
						add_opinion_modifier = {
							modifier = opinion_fatherland_dissident
							who = root
						}
						if = {
							limit = {
								is_authoritarian = yes
								root = { has_ethic = ethic_fanatic_authoritarian }
							}
							while = {
								limit = { is_authoritarian = yes }
								shift_ethic = ethic_egalitarian
							}
						}
						else_if = {
							limit = {
								is_egalitarian = yes
								root = { has_ethic = ethic_fanatic_egalitarian }
							}
							while = {
								limit = { is_egalitarian = yes }
								shift_ethic = ethic_authoritarian
							}
						}
						if = {
							limit = {
								is_militarist = yes
								root = { has_ethic = ethic_fanatic_militarist }
							}
							while = {
								limit = { is_militarist = yes }
								shift_ethic = ethic_pacifist
							}
						}
						else_if = {
							limit = {
								is_pacifist = yes
								root = { has_ethic = ethic_fanatic_pacifist }
							}
							while = {
								limit = { is_pacifist = yes }
								shift_ethic = ethic_militarist
							}
						}
						if = {
							limit = {
								is_materialist = yes
								root = { has_ethic = ethic_fanatic_materialist }
							}
							while = {
								limit = { is_materialist = yes }
								shift_ethic = ethic_spiritualist
							}
						}
						else_if = {
							limit = {
								is_spiritualist = yes
								root = { has_ethic = ethic_fanatic_spiritualist }
							}
							while = {
								limit = { is_spiritualist = yes }
								shift_ethic = ethic_materialist
							}
						}
						if = {
							limit = {
								is_xenophile = yes
								root = { has_ethic = ethic_fanatic_xenophile }
							}
							while = {
								limit = { is_xenophile = yes }
								shift_ethic = ethic_xenophobe
							}
						}
						else_if = {
							limit = {
								is_xenophobe = yes
								root = { has_ethic = ethic_fanatic_xenophobe }
							}
							while = {
								limit = { is_xenophobe = yes }
								shift_ethic = ethic_xenophile
							}
						}
						if = {
							limit = {
								is_socialist = yes
								root = { has_ethic = ethic_fanatic_socialism }
							}
							while = {
								limit = { is_socialist = yes }
								shift_ethic = ethic_capitalism
							}
						}
						else_if = {
							limit = {
								is_capitalism = yes
								root = { has_ethic = ethic_fanatic_capitalism }
							}
							while = {
								limit = { is_capitalism = yes }
								shift_ethic = ethic_socialism
							}
						}
						change_government = {
							authority = random
							civics = random
						}
						get_rogue_colony_after_effect = yes
					}
				}
			}
			if = {  ######## ROGUE CORPO
				limit = { has_country_flag = fatherland_roguesetup_corpo }
				custom_tooltip = "fatherland_rogue.100.corpo.tooltip"
				if = {
					limit = { has_global_flag = cultural_overhaul_active }
					create_country = {
						inline_script = "countries/fatherland_rogue_corpo"
						species = event_target:fatherland_species
						authority = auth_corporate
						randomize_ethos = yes
						ethos = {
							ethic = ethic_capitalism
						}
						origin = origin_rogue_corporation
						effect = {
							get_rogue_colony_after_effect = yes
						}
					}
				}
				else = {
					create_country = {
						inline_script = "countries/fatherland_rogue_corpo"
						species = event_target:fatherland_species
						authority = auth_corporate
						ethos = random
						origin = origin_rogue_corporation
						effect = {
							get_rogue_colony_after_effect = yes
						}
					}
				}
			}
			if = {  ######## ROGUE Family CORPO
				limit = { has_country_flag = fatherland_roguesetup_family_corpo }
				custom_tooltip = "fatherland_rogue.100.corpo.tooltip"
				create_country = {
					inline_script = "countries/fatherland_rogue_corpo"
					species = event_target:fatherland_species
					#authority = auth_corporate_imperial
					authority = auth_corporate
					ethos = random
					origin = origin_rogue_corporation
					effect = {
						get_rogue_colony_after_effect = yes
						while = {
							limit = { is_authoritarian = no }
							shift_ethic = ethic_authoritarian
						}
						while = {
							limit = { is_capitalism = no }
							shift_ethic = ethic_capitalism
						}
						change_government = {
							authority = auth_corporate_imperial
							cooldown = no
							civics = random
						}
						set_name = random
					}
				}
			}
			if = {  ######## ROGUE AI
				limit = { has_country_flag = fatherland_roguesetup_ai }
				custom_tooltip = "fatherland_rogue.100.rogueai.tooltip"
				create_species = {
					name = random
					class = MACHINE
					portrait = random
					traits = {
						trait = trait_machine_unit
						trait = random_traits
						trait = random_traits
					}
					immortal = yes
				}
				create_country = {
					name = random
					type = default
					species = last_created_species
					ignore_initial_colony_error = yes
					day_zero_contact = no
					ethos = { ethic = ethic_gestalt_consciousness }
					authority = auth_machine_intelligence
					civics = random
					flag = random
					origin = origin_rogue_ai
					effect = {
						get_rogue_colony_after_effect = yes
					}
				}
				#remove_country_flag = fatherland_roguesetup_ai
			}
			if = {  ######## PLUCKY EXPLORERS
				limit = { has_country_flag = fatherland_roguesetup_explorers }
				custom_tooltip = "fatherland_rogue.100.explorers.tooltip"
				create_country = {
					inline_script = "countries/fatherland_rogue_default"
					species = event_target:fatherland_species
					civics = random
					origin = origin_plucky_explorers
					effect = {
						# if = { limit = { root = { has_valid_civic = civic_fanatic_purifier } }
						# 	force_add_civic = civic_fanatic_purifier
						# }
						add_opinion_modifier = {
							modifier = opinion_fatherland_plucky
							who = root
						}
						get_rogue_colony_after_effect = yes
					}
				}
			}
			if = {  ######## BANISHED HOUSE
				limit = { has_country_flag = fatherland_roguesetup_banished }
				custom_tooltip = "fatherland_rogue.100.banished.tooltip"
				if = {
					limit = { has_global_flag = cultural_overhaul_funefork_active }
					random_list = {
						50 = {
							create_country = {
								name = random
								authority = auth_imperial
								ethos = random
								civics = random
								origin = origin_banished_house
								species = event_target:fatherland_species
								ignore_initial_colony_error = yes
								flag = random
								type = default
							}
							modifier = {
								factor = 2
								root = { is_imperial_authority =yes }
							}
						}
						50 = {
							create_country = {
								name = random
								authority = auth_dictatorial
								ethos = random
								civics = random
								origin = origin_banished_house
								species = event_target:fatherland_species
								ignore_initial_colony_error = yes
								flag = random
								type = default
							}
							modifier = {
								factor = 2
								root = { is_dictatorial_authority =yes }
							}
						}
					}
				}
				else = {
					create_country = {
						name = random
						authority = auth_imperial
						ethos = random
						civics = random
						origin = origin_banished_house
						species = event_target:fatherland_species
						ignore_initial_colony_error = yes
						flag = random
						type = default
					}
				}

				last_created_country = {
					add_opinion_modifier = {
						modifier = opinion_fatherland_banished_house
						who = root
					}
					if = {
						limit = { root = { has_civic = civic_feudal_realm } }
						while = {
							limit = { is_socialist = yes }
							shift_ethic = ethic_capitalism
						}
						change_government = {
							remove_invalid_civics = yes
							civics = { civic = civic_feudal_realm civic = random civic = random }
						}
					}
					else = {
						while = {
							limit = { is_socialist = yes }
							shift_ethic = ethic_capitalism
						}
						change_government = {
							remove_invalid_civics = yes
							civics = { civic = civic_aristocratic_elite civic = random civic = random }
						}
					}
					get_rogue_colony_after_effect = yes
				}
			}
			if = {  ######## CRUSADER STATE
				limit = { has_country_flag = fatherland_roguesetup_crusaders }
				custom_tooltip = "fatherland_rogue.100.crusaders.tooltip"
				if = {
					limit = { has_global_flag = cultural_overhaul_active }
					create_country = {
						name = random
						authority = random
						randomize_ethos = yes
						ethos = {
							ethic = ethic_fanatic_spiritualist
							ethic = ethic_fanatic_militarist
						}
						civics = random
						origin = origin_crusader_state
						species = event_target:fatherland_species
						ignore_initial_colony_error = yes
						flag = random
						type = default
						effect = {
							#set_country_flag = fatherland_player_rogue
							add_opinion_modifier = {
								modifier = opinion_fatherland_holy_land
								who = root
							}
							get_rogue_colony_after_effect = yes
						}
					}
				}
				else = {
					create_country = {
						name = random
						authority = random
						ethos = {
							ethic = ethic_fanatic_spiritualist
							ethic = ethic_militarist
						}
						civics = random
						origin = origin_crusader_state
						species = event_target:fatherland_species
						ignore_initial_colony_error = yes
						flag = random
						type = default
						effect = {
							#set_country_flag = fatherland_player_rogue
							add_opinion_modifier = {
								modifier = opinion_fatherland_holy_land
								who = root
							}
							get_rogue_colony_after_effect = yes
						}
					}
				}
			}
			if = {  ######## SLAVE REVOLT
				limit = { has_country_flag = fatherland_roguesetup_slaves }
				custom_tooltip = "fatherland_rogue.100.slaves.tooltip"
				if = {
					limit = { has_global_flag = cultural_overhaul_active }
					if = {
						limit = { has_global_flag = cultural_overhaul_funefork_active }
						random_list = {
							49 = {
								create_country = {
									name = random
									type = default
									species = event_target:fatherland_species
									ignore_initial_colony_error = yes
									randomize_ethos = yes
									ethos = {
										ethic = ethic_fanatic_egalitarian
										ethic = ethic_fanatic_militarist
									}
									authority = auth_democratic
									civics = random
									origin = origin_free_slaves
									flag = random
								}
							}
							49 = {
								create_country = {
									name = random
									type = default
									species = event_target:fatherland_species
									ignore_initial_colony_error = yes
									randomize_ethos = yes
									ethos = {
										ethic = ethic_fanatic_egalitarian
										ethic = ethic_fanatic_militarist
									}
									authority = auth_strict_democratic
									civics = random
									origin = origin_free_slaves
									flag = random
								}
							}
							2 = {
								create_country = {
									name = random
									type = default
									species = event_target:fatherland_species
									ignore_initial_colony_error = yes
									randomize_ethos = yes
									ethos = {
										ethic = ethic_fanatic_egalitarian
										ethic = ethic_fanatic_militarist
									}
									authority = auth_dict_democratic
									civics = random
									origin = origin_free_slaves
									flag = random
								}
							}
						}
					}
					else = {
						random_list = {
							80 = {
								create_country = {
									name = random
									type = default
									species = event_target:fatherland_species
									ignore_initial_colony_error = yes
									randomize_ethos = yes
									ethos = {
										ethic = ethic_fanatic_egalitarian
										ethic = ethic_fanatic_militarist
									}
									authority = auth_democratic
									civics = random
									origin = origin_free_slaves
									flag = random
								}
							}
							20 = {
								create_country = {
									name = random
									type = default
									species = event_target:fatherland_species
									ignore_initial_colony_error = yes
									ethos = {
										ethic = ethic_fanatic_egalitarian
										ethic = ethic_fanatic_militarist
										ethic = random
									}
									authority = auth_direct_democratic
									civics = random
									origin = origin_free_slaves
									flag = random
								}
							}
						}
					}
				}
				else = {
					create_country = {
						name = random
						type = default
						species = event_target:fatherland_species
						ignore_initial_colony_error = yes
						ethos = {
							ethic = ethic_fanatic_egalitarian
							ethic = ethic_militarist
						}
						authority = auth_democratic
						civics = random
						origin = origin_free_slaves
						flag = random
					}
				}
				last_created_country = {
					set_country_flag = fatherland_rogue_slave_country
					add_opinion_modifier = {
						modifier = opinion_fatherland_free_slave
						who = root
					}
					add_casus_belli = {
						type = cb_liberate_slaves
						who = root
						days = -1
					}
					get_rogue_colony_after_effect = yes
				}
				set_country_flag = fatherland_rogue_slaves
			}
			if = {  ######## PROLE REVOLT
				limit = { has_country_flag = fatherland_roguesetup_proles }
				custom_tooltip = "fatherland_rogue.100.proles.tooltip"
				create_country = {
					inline_script = "countries/fatherland_rogue_default"
					species = event_target:fatherland_species
					civics = random
					origin = origin_free_proles
					effect = {
						add_opinion_modifier = {
							modifier = opinion_fatherland_free_prole
							who = event_target:fatherland_empire
						}
						add_casus_belli = {
							type = cb_liberate_brothers
							who = root
							days = -1
						}
						get_rogue_colony_after_effect = yes
						add_opinion_modifier = {
							modifier = opinion_fatherland_free_prole
							who = root
						}
						# country_event = { id = fatherland_rogue.102 days = 5 }
						founder_species = { ## FUNE TODO this changes the original proles in the fatherland country as well, so needs to be fixed.
							change_species_characteristics = {
								remove_trait = trait_syncretic_proles
								add_trait = trait_liberated_syncretic_proles
								add_traits_at_start_of_list = yes
							}
						}
					}
				}
			}
			if = {  ######## LIBERATED BIOTROPHIES
				limit = { has_country_flag = fatherland_roguesetup_biotrophy }
				set_country_flag = fatherland_biotrophy_security
				custom_tooltip = "fatherland_rogue.100.biotrophy.tooltip"
				create_country = {
					name = random
					type = default
					species = event_target:fatherland_species
					ignore_initial_colony_error = yes
					ethos = random
					authority = random
					civics = random
					origin = origin_liberated_biotrophies
					flag = random
					effect = {
						get_rogue_colony_after_effect = yes
						add_opinion_modifier = {
							modifier = opinion_fatherland_liberated_biotrophy
							who = root
						}
						# add_casus_belli = {
						# 	type = cb_liberate_bitrophies
						# 	who = root
						# 	days = -1
						# }
						# country_event = { id = fatherland_rogue.102 days = 5 }
					}
				}
				root = {
					add_casus_belli = {
						type = cb_recapture_biotrophies
						who = last_created_country
						days = -1
					}
				}
			}
			if = {  ######## SYNTH REVOLT
				limit = { has_country_flag = fatherland_roguesetup_synthrevolt }
				custom_tooltip = "fatherland_roguesetup_synthrevolt.tooltip"
				create_country = {
					name = random
					type = default
					species = event_target:fatherland_species
					ignore_initial_colony_error = yes
					day_zero_contact = no
					ethos = random
					authority = random
					civics = random
					flag = random
					origin = origin_free_synths
					effect = {
						get_rogue_colony_after_effect = yes
					}
				}
				#remove_country_flag = fatherland_roguesetup_machineintelligence
			}
			if = {  ######## DISINHERITED HEIR
				limit = { has_country_flag = fatherland_roguesetup_heir }
				custom_tooltip = "fatherland_rogue.100.heir.tooltip"
				create_country = {
					name = random
					authority = auth_imperial
					ethos = random
					civics = random
					origin = origin_fl_disinherited_heir
					species = event_target:fatherland_species
					ignore_initial_colony_error = yes
					flag = random
					type = default
					effect = {
						add_opinion_modifier = {
							modifier = opinion_fatherland_disinherited_heir
							who = root
						}
						get_rogue_colony_after_effect = yes
					}
				}
				last_created_country = {
					event_target:disinherited_heir_fatherland = { set_owner = prev }
					set_leader = event_target:disinherited_heir_fatherland
				}
			}
			######## MACHINE INTELLIGENCE
			if = {  ######## STANDARD MACHINE INTELLIGENCE
				limit = { has_country_flag = fatherland_roguesetup_machineintelligence }
				custom_tooltip = "fatherland_roguesetup_machineintelligence.tooltip"
				create_country = {
					name = random
					type = default
					species = event_target:fatherland_species
					ignore_initial_colony_error = yes
					day_zero_contact = no
					ethos = { ethic = ethic_gestalt_consciousness }
					authority = auth_machine_intelligence
					civics = random
					flag = random
					origin = origin_rogue_ai
					effect = {
						get_rogue_colony_after_effect = yes
					}
				}
				#remove_country_flag = fatherland_roguesetup_machineintelligence
			}
			event_target:rogue_event_planet = {
				set_owner = event_target:rogue_colony_nation
				solar_system = {
					create_starbase = {
						size = starbase_starhold
						building = crew_quarters
						owner = event_target:rogue_colony_nation
						effect = {
							set_starbase_module = {
								slot = 1
								module = shipyard
							}
							set_starbase_module = {
								slot = 2
								module = shipyard
							}
							set_starbase_module = {
								slot = 3
								module = trading_hub
							}
							set_starbase_module = {
								slot = 4
								module = hangar_bay
							}
						}
					}
				}
				starbase = { set_owner = event_target:rogue_colony_nation }
				set_capital = yes
				owner = { country_event = { id = fatherland_rogue.103 } }

				random_list = {
					33 = { add_district = district_farming }
					33 = {
						add_district = district_farming
						add_district = district_farming
					}
					33 = {
						add_district = district_farming
						add_district = district_farming
						add_district = district_farming
					}
				}
				add_district = district_city
				add_district = district_mining
				add_district = district_generator

				######## POP CREATION ON NEW PLANET
				if = {	### IF NORMAL EMPIRE CREATING ROGUE AI
					limit = {
						root = {
							NOT = { has_authority = auth_machine_intelligence }
							has_country_flag = fatherland_roguesetup_ai
						}
					}
					create_pop = { species = last_created_species }
				}
				else_if = {	### IF MACHINE EMPIRE CREATING MACHINE POP ROGUE
					limit = {
						root = {
							has_authority = auth_machine_intelligence
							has_country_flag = fatherland_roguesetup_machineintelligence
						}
					}
					create_pop = { species = event_target:fatherland_species }
				}
				else = {	### IF NORMAL EMPIRE OR BIOTROPHIES
					# limit = {
					# 	owner = {
					# 		OR = {
					# 			AND = {
					# 				has_authority = auth_machine_intelligence
					# 				has_country_flag = fatherland_roguesetup_biotrophy
					# 			}
					# 			NOT = { has_authority = auth_machine_intelligence }
					# 		}
					# 	}
					# }
					random_list = {
						60 = {
							while = {
								count = 3
								create_pop = { species = event_target:fatherland_species }
							}
						}
						35 = {
							while = {
								count = 4
								create_pop = { species = event_target:fatherland_species }
							}
						}
						5 = {
							while = {
								count = 5
								create_pop = { species = event_target:fatherland_species }
							}
						}
					}
				}
				# ######## ADD ROGUE COLONY WORLD BONUS TO NEW PLANET
				if = {
					limit = {
						root = {
							NOR = {
								has_country_flag = fatherland_roguesetup_machineintelligence
								has_country_flag = fatherland_roguesetup_ai
							}
						}
						NOR = {
							has_modifier = rogue_colonial_world
							is_artificial = yes
							habitable_planet = no
						}
					}
					add_modifier = {
						modifier = rogue_colonial_world
						days = -1
					}
					add_modifier = {
						modifier = recent_rogue_colony
						years = 10
					}
					owner = {
						add_modifier = {
							modifier = rogue_nation_boost
							years = 15
						}
					}
				}
				if = {
					limit = { root = { NOT = { has_country_flag = fatherland_roguesetup_ai } } }
					event_target:rogue_colony_nation = {
						# Science
						create_fleet = {
							effect = {
								set_owner = event_target:rogue_colony_nation
								create_ship = {
									name = random
									random_existing_design = science
								}
								set_fleet_stance = evasive
								set_location = event_target:rogue_event_planet
								owner = {
									get_fatherland_leader_homeworld = yes
									create_leader = {
										name = random
										class = scientist
										sub_type = survey
										species = owner_main_species
										background_planet = event_target:leader_homeworld
									}
								}
								set_leader = last_created_leader
							}
						}

						# Construction Ship
						create_fleet = {
							effect = {
								set_owner = event_target:rogue_colony_nation
								create_ship = {
									name = random
									random_existing_design = constructor
								}
								set_fleet_stance = evasive
								set_location = event_target:rogue_event_planet
							}
						}

						# Create Leaders
						get_fatherland_leader_homeworld = yes
						create_leader = {
							class = official
							species = owner_main_species
							name = random
							skill = 5
							background_planet = event_target:leader_homeworld
						}
						while = {
							count = 2
							get_fatherland_leader_homeworld = yes
							create_leader = {
								class = commander
								species = owner_main_species
								name = random
								skill = 5
								background_planet = event_target:leader_homeworld
							}
						}
						while = {
							count = 3
							get_fatherland_leader_homeworld = yes
							create_leader = {
								class = scientist
								species = owner_main_species
								name = random
								skill = 5
								background_planet = event_target:leader_homeworld
							}
						}
					}
				}
				######## CLEANUP
				remove_planet_flag = rogue_target
				remove_modifier = rogue_target
				root = { #Removes flagging for types
					if = {
						limit = { has_country_flag = fatherland_roguesetup_explorers }
						remove_country_flag = fatherland_roguesetup_explorers
					}
					else_if = {
						limit = { has_country_flag = fatherland_roguesetup_ai }
						remove_country_flag = fatherland_roguesetup_ai
					}
					else_if = {
						limit = { has_country_flag = fatherland_roguesetup_banished }
						remove_country_flag = fatherland_roguesetup_banished
						if = {
							limit = {
								any_owned_leader = {
									is_heir = no
									is_ruler = no
									is_councilor = no
								}
							}
							random_owned_leader = {
								limit = {
									is_heir = no
									is_ruler = no
									is_councilor = no
								}
								set_leader_flag = left_to_lead
								set_owner = last_created_country
								last_created_country = { set_leader = prev }
							}
						}
					}
					else_if = {
						limit = { has_country_flag = fatherland_roguesetup_biotrophy }
						remove_country_flag = fatherland_roguesetup_biotrophy
					}
					else_if = {
						limit = { has_country_flag = fatherland_roguesetup_corpo }
						remove_country_flag = fatherland_roguesetup_corpo
					}
					else_if = {
						limit = { has_country_flag = fatherland_roguesetup_family_corpo }
						remove_country_flag = fatherland_roguesetup_family_corpo
					}
					else_if = {
						limit = { has_country_flag = fatherland_roguesetup_crusaders }
						remove_country_flag = fatherland_roguesetup_crusaders
						random = {
							chance = 30
							random_owned_leader = {
								limit = {
									is_heir = no
									is_ruler = no
									is_councilor = no
								}
								set_leader_flag = left_to_lead
								set_owner = last_created_country
								last_created_country = { set_leader = prev }
							}
						}
					}
					else_if = {
						limit = { has_country_flag = fatherland_roguesetup_dissidents }
						remove_country_flag = fatherland_roguesetup_dissidents
						if = {
							limit = {
								any_owned_leader = {
									is_heir = no
									is_ruler = no
									is_councilor = no
									has_opposing_ethics = { COUNTRY1 = this COUNTRY2 = root }
								}
							}
							random_owned_leader = {
								limit = {
									is_heir = no
									is_ruler = no
									is_councilor = no
									has_opposing_ethics = { COUNTRY1 = this COUNTRY2 = root }
								}
								set_leader_flag = left_to_lead
								set_owner = last_created_country
								last_created_country = { set_leader = prev }
							}
						}
					}
					else_if = {
						limit = { has_country_flag = fatherland_roguesetup_minority }
						remove_country_flag = fatherland_roguesetup_minority
						if = {
							limit = { any_owned_leader = { species = { is_same_value = event_target:fatherland_species } } }
							random_owned_leader = {
								limit = { species = { is_same_value = event_target:fatherland_species } }
								set_leader_flag = left_to_lead
								set_owner = last_created_country
								last_created_country = { set_leader = prev }
							}
						}
					}
					else_if = {
						limit = { has_country_flag = fatherland_roguesetup_proles }
						remove_country_flag = fatherland_roguesetup_proles
					}
					else_if = {
						limit = { has_country_flag = fatherland_roguesetup_slaves }
						remove_country_flag = fatherland_roguesetup_slaves
					}
					else_if = {
						limit = { has_country_flag = fatherland_roguesetup_synthrevolt }
						remove_country_flag = fatherland_roguesetup_synthrevolt
					}

					set_timed_country_flag = { flag = no_rogue_timer years = 15 }
				}
				if = {
					limit = { has_global_flag = fatherland_instantcomms }
					solar_system = {
						every_system_planet = { set_surveyed = { surveyed = yes } }
					}
				}
			}
			last_created_country = {
				set_variable = { which = birth_year value = 2200 }
				export_trigger_value_to_variable = {
					trigger = years_passed
					variable = years_passed_birthday
				}
				change_variable = { which = birth_year value = this.years_passed_birthday }
				clear_variable = years_passed_birthday

				set_timed_country_flag = { flag = no_rogue_timer years = 25 }

				country_event = { id = action.502 }
			}
			############################################################## UPDATE COUNT
			event_target:global_event_country = { #Sets the globalmax variable for global_event_country.
				change_variable = {
					which = fatherland_currentglobal_rogues
					value = 1
				}
			}
			set_variable = {
				which = fatherland_currentglobal_rogues
				value = event_target:global_event_country.fatherland_currentglobal_rogues
			}
			if = {
				limit = { is_ai = yes }
				set_variable = {
					which = fatherland_aicurrent_rogues
					value = 1
				}
			}
			if = {
				limit = { is_ai = no }
				set_variable = {
					which = fatherland_playercurrent_rogues
					value = 1
				}
			}
			every_playable_country = {
				limit = { is_country_type_with_subjects = yes }
				country_event = { id = fatherland_rogue.101 }
			}
			if = {
				limit = {
					has_global_flag = fatherland_poploss_on
					NOT = { has_country_flag = fatherland_roguesetup_machineintelligence }
				}
				random_owned_pop = {
					limit = { has_pop_flag = fatherland_rogue_pop }
					kill_pop = yes
				}
			}
			else = {
				random_owned_pop = {
					limit = { has_pop_flag = fatherland_rogue_pop }
					remove_pop_flag =  fatherland_rogue_pop
				}
			}
		}
	}
}

country_event = { ###Update total to all nations
    id = fatherland_rogue.101
	is_triggered_only = yes	
	hide_window = yes
	
	immediate = {
		set_variable = {
			which = fatherland_currentglobal_rogues
			value = event_target:global_event_country.fatherland_currentglobal_rogues
		}
		set_variable = {
			which = fatherland_globalmax_rogues
			value = event_target:global_event_country.fatherland_globalmax_rogues
		}
		set_variable = {
			which = fatherland_aimax_rogues
			value = event_target:global_event_country.fatherland_aimax_rogues
		}		
	}	
}

country_event = { #Alters Liberated Prole Species
    id = fatherland_rogue.102
    title = "fatherland_rogue.102_name"
    desc = "fatherland_rogue.102_desc"
    picture = GFX_evt_alien_segregation
	is_triggered_only = yes
	hide_window = no

	trigger = {
		has_origin = origin_free_proles
		NOT = { has_country_flag = fatherland_liberated_prole_edit }
	}

	immediate = {
	}
	option = {
		name = fatherland_rogue.102.a
		hidden_effect = {
			modify_species = {
				species = root.species
				remove_trait = trait_syncretic_proles
				add_trait = trait_liberated_syncretic_proles
				add_traits_at_start_of_list = yes
			}
			set_country_flag = fatherland_liberated_prole_edit
		}
		custom_tooltip = "fatherland_rogue.102.a.tooltip"
	}
}

country_event = { #Rogue Renaming Event
    id = fatherland_rogue.103
	is_triggered_only = yes	
	hide_window = yes
	
	trigger = {
		NOT = { has_country_flag = fatherland_rogues_namecheck }
	}

	immediate = {	
		capital_scope = { set_name = random }
		set_name = random
		set_country_flag = fatherland_rogues_namecheck
	}
}

# Remove Fatherland Planet Modifier if planet is decolonized.
event = {
	id = fatherland_rogue.900
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_galaxy_planet = {
			OR = {
				has_owner = no
				owner = { is_rogue_colony = no }
			}
			has_modifier = rogue_colonial_world
		}
	}

	immediate = {
		every_galaxy_planet = {
			limit = {
				OR = {
					has_owner = no
					owner = { is_rogue_colony = no }
				}
				has_modifier = rogue_colonial_world
			}
			remove_modifier = rogue_colonial_world
		}
	}
}


country_event = { #Five Year Census Event - Part One (resets global event total to 0)
    id = fatherland_rogue.997
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		is_rogue_colony = yes
		NOT = { has_global_flag = fatherland_limittomax_rogues }
	}

	immediate = {
		event_target:global_event_country = { #Sets the globalmax variable for global_event_country. 
			set_variable = {
				which = fatherland_currentglobal_rogues
				value = 0
			}	
		}
			country_event = { id = fatherland_rogue.998 
			days = 2
		}								
	}
}

country_event = { #Five Year Census Event - Part Two (For every hegira country, adds one to currentglobal variable for GEC)
    id = fatherland_rogue.998
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		is_rogue_colony = yes
		NOT = { has_global_flag = fatherland_limittomax_rogues }
	}

	immediate = {
		event_target:global_event_country = { #Sets the globalmax variable for global_event_country. 
			change_variable = {
				which = fatherland_currentglobal_rogues
				value = 1
			}	
		}	
			country_event = { id = fatherland_rogue.101 
			days = 2
			}							
	}
}

country_event = { #On rogue colony Destroyed / Annexed 
    id = fatherland_rogue.999
    # title = "fatherland_rogue.999_name"
    # desc = "fatherland_rogue.999_desc"
    # picture = GFX_evt_burning_settlement
	is_triggered_only = yes	
	hide_window = yes
	
	trigger = {
		is_rogue_colony = yes
	}

	immediate = {
		event_target:global_event_country = { #Sets the globalmax variable for global_event_country. 
			if = {
				limit = { NOT = { has_global_flag = fatherland_limittomax_rogues } }
				change_variable = {
					which = fatherland_currentglobal_rogues
					value = -1
				}
			}
			change_variable = {
				which = fatherland_destroyed_rogues
				value = 1
			}			
		}	
		every_country = {
			limit = { is_country_type_with_subjects = yes }
			country_event = { id = fatherland_rogue.101 }				
		}			
	}
}